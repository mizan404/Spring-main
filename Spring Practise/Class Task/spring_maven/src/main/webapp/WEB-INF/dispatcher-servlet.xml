<?xml version='1.0' encoding='UTF-8' ?>
<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context = "http://www.springframework.org/schema/context"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation = "http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!--  context:component-scan
          Scan the classes inside the specified package and create the beans instance.
        * @Component
        * @Repository
        * @Service
        * @Controller
    --> 
    <context:component-scan base-package="com.spring.web"/>
    
    <!--  context:annotation-config 
          It will resolve @Autowired, @Resource, @Required, @PostConstruct etc. annotations 
          For the beans which are already created and stored in the spring container.
    --> 
    <context:annotation-config/>
    
    <!--  mvc:annotation-driven
        * Using the Spring 3 Type ConversionService as a simpler and more robust alternative to JavaBeans PropertyEditors
        * Support for formatting Number fields with @NumberFormat
        * Support for formatting Date, Calendar, and Joda Time fields with @DateTimeFormat, if Joda Time is on the classpath
        * Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is on the classpath
        * Support for reading and writing XML, if JAXB is on the classpath
        * Support for reading and writing JSON, if Jackson is on the classpath
    -->
    <mvc:annotation-driven/>
    
    <!-- 
        InternalResourceViewResolver is an implementation of ViewResolver in Spring MVC framework which resolves logical view name e.g. "index", 
        if prefix is "/WEB-INF/views/" and suffix is ".jsp" then "index" will be resolved to "/WEB-INF/views/index.jsp" by InternalResourceViewResolver
    -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/jsp/"
          p:suffix=".jsp" /> 
    
    
    <!--
          // ################ Static DataSource ###################
    -->      
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="jdbc:mysql://localhost:3306/tsp"/>
        <property name="username" value="root"/>
        <property name="password" value="12345"/>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    </bean>
    <!--
    -->
    
    <!-- Loading jdbc properties file -->
    <!--    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          p:location="/WEB-INF/properties/jdbc.properties" />
    -->
    <!-- Using DataSource by Properties file -->
    <!--    <bean id="dataSource"
    class="org.springframework.jdbc.datasource.DriverManagerDataSource"
    p:driverClassName="${jdbc.driverClassName}"
    p:url="${jdbc.url}"
    p:username="${jdbc.username}"-->
    p:password="${jdbc.password}" />
    
    <!-- Start : +++++++++++++++ Hibernate's sessionFactory Configuration +++++++++++++++++ -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect = org.hibernate.dialect.MySQLDialect
                hibernate.show_sql = true
            </value>
        </property>
        <property name="packagesToScan"> 
            <!-- Location of the Entity packages where to scan for Entities -->
            <value>com.spring.web.model</value>
        </property>
        <property name="annotatedClasses">
            <list>
                <!-- All the Entity Classes where Hibernate's Annotation will work on -->
                <value>com.spring.web.model.Employee</value> 
            </list>
        </property>
    </bean>
    <!-- End : +++++++++++++++ Hibernate's sessionFactory Configuration +++++++++++++++++ -->
    
    <!-- ***  Hibernate Transaction Manager Configuration || HibernateTransactionManager ***  -->
    <!--   =============== @Transactional Annotation ==================   -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
 
    <!--   =============== @Transactional Annotation ==================   -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!--  ++++++++++++++++ Global Interceptor for all Handler Mapping +++++++++++++++++++ -->
    <!--    
     <mvc:interceptors>
        <bean id="interceptor" class="com.spring.web.controller.InceptorController"></bean>
    </mvc:interceptors>
    -->

    <!--  ++++++++++++++++ Interceptor for Specific Handler Mapping +++++++++++++++++++ -->
       
</beans>
